// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  public unsafe partial class Frame {
    public unsafe partial struct FrameEvents {
      static partial void GetEventTypeCountCodeGen(ref Int32 eventCount) {
        eventCount = 19;
      }
      static partial void GetParentEventIDCodeGen(Int32 eventID, ref Int32 parentEventID) {
        switch (eventID) {
          case EventOnMechanicTakeDamage.ID: parentEventID = EventMechanicEvent.ID; return;
          case EventOnMechanicDeath.ID: parentEventID = EventMechanicEvent.ID; return;
          case EventOnMechanicCreated.ID: parentEventID = EventMechanicEvent.ID; return;
          case EventOnMechanicRespawn.ID: parentEventID = EventMechanicEvent.ID; return;
          case EventOnMechanicChangeWeapon.ID: parentEventID = EventMechanicEvent.ID; return;
          case EventOnMechanicDashed.ID: parentEventID = EventMechanicEvent.ID; return;
          case EventOnNexusTakeDamage.ID: parentEventID = EventNexusEvent.ID; return;
          case EventOnNexusDestroy.ID: parentEventID = EventNexusEvent.ID; return;
          default: break;
        }
      }
      static partial void GetEventTypeCodeGen(Int32 eventID, ref System.Type result) {
        switch (eventID) {
          case EventOnBulletDestroyed.ID: result = typeof(EventOnBulletDestroyed); return;
          case EventMechanicEvent.ID: result = typeof(EventMechanicEvent); return;
          case EventOnMechanicTakeDamage.ID: result = typeof(EventOnMechanicTakeDamage); return;
          case EventOnMechanicDeath.ID: result = typeof(EventOnMechanicDeath); return;
          case EventOnMechanicCreated.ID: result = typeof(EventOnMechanicCreated); return;
          case EventOnMechanicRespawn.ID: result = typeof(EventOnMechanicRespawn); return;
          case EventOnMechanicChangeWeapon.ID: result = typeof(EventOnMechanicChangeWeapon); return;
          case EventOnMechanicDashed.ID: result = typeof(EventOnMechanicDashed); return;
          case EventOnGameEnded.ID: result = typeof(EventOnGameEnded); return;
          case EventGameStateChanged.ID: result = typeof(EventGameStateChanged); return;
          case EventMovement.ID: result = typeof(EventMovement); return;
          case EventWeaponFire.ID: result = typeof(EventWeaponFire); return;
          case EventNexusEvent.ID: result = typeof(EventNexusEvent); return;
          case EventOnNexusTakeDamage.ID: result = typeof(EventOnNexusTakeDamage); return;
          case EventOnNexusDestroy.ID: result = typeof(EventOnNexusDestroy); return;
          case EventOnTeamNexusDestroy.ID: result = typeof(EventOnTeamNexusDestroy); return;
          case EventOnWeaponShoot.ID: result = typeof(EventOnWeaponShoot); return;
          case EventDummyEvent.ID: result = typeof(EventDummyEvent); return;
          default: break;
        }
      }
      public EventOnBulletDestroyed OnBulletDestroyed(Int32 BulletRefHashCode, EntityRef Mechanic, FPVector3 BulletPosition, FPVector3 BulletDirection, AssetRef<BulletData> BulletData) {
        var ev = _f.Context.AcquireEvent<EventOnBulletDestroyed>(EventOnBulletDestroyed.ID);
        ev.BulletRefHashCode = BulletRefHashCode;
        ev.Mechanic = Mechanic;
        ev.BulletPosition = BulletPosition;
        ev.BulletDirection = BulletDirection;
        ev.BulletData = BulletData;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnMechanicTakeDamage OnMechanicTakeDamage(EntityRef Mechanic, FP Damage, EntityRef Source) {
        var ev = _f.Context.AcquireEvent<EventOnMechanicTakeDamage>(EventOnMechanicTakeDamage.ID);
        ev.Mechanic = Mechanic;
        ev.Damage = Damage;
        ev.Source = Source;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnMechanicDeath OnMechanicDeath(EntityRef Mechanic, EntityRef Killer) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnMechanicDeath>(EventOnMechanicDeath.ID);
        ev.Mechanic = Mechanic;
        ev.Killer = Killer;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnMechanicCreated OnMechanicCreated(EntityRef Mechanic) {
        var ev = _f.Context.AcquireEvent<EventOnMechanicCreated>(EventOnMechanicCreated.ID);
        ev.Mechanic = Mechanic;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnMechanicRespawn OnMechanicRespawn(EntityRef Mechanic) {
        var ev = _f.Context.AcquireEvent<EventOnMechanicRespawn>(EventOnMechanicRespawn.ID);
        ev.Mechanic = Mechanic;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnMechanicChangeWeapon OnMechanicChangeWeapon(EntityRef Mechanic) {
        var ev = _f.Context.AcquireEvent<EventOnMechanicChangeWeapon>(EventOnMechanicChangeWeapon.ID);
        ev.Mechanic = Mechanic;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnMechanicDashed OnMechanicDashed(EntityRef Mechanic) {
        var ev = _f.Context.AcquireEvent<EventOnMechanicDashed>(EventOnMechanicDashed.ID);
        ev.Mechanic = Mechanic;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnGameEnded OnGameEnded() {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnGameEnded>(EventOnGameEnded.ID);
        _f.AddEvent(ev);
        return ev;
      }
      public EventGameStateChanged GameStateChanged(GameState NewState, GameState OldState) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventGameStateChanged>(EventGameStateChanged.ID);
        ev.NewState = NewState;
        ev.OldState = OldState;
        _f.AddEvent(ev);
        return ev;
      }
      public EventMovement Movement(EntityRef Owner, FP Velocity) {
        var ev = _f.Context.AcquireEvent<EventMovement>(EventMovement.ID);
        ev.Owner = Owner;
        ev.Velocity = Velocity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventWeaponFire WeaponFire(EntityRef Owner, AssetRef<WeaponData> WeaponData) {
        var ev = _f.Context.AcquireEvent<EventWeaponFire>(EventWeaponFire.ID);
        ev.Owner = Owner;
        ev.WeaponData = WeaponData;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnNexusTakeDamage OnNexusTakeDamage(EntityRef Nexus, FP Damage, EntityRef Source) {
        var ev = _f.Context.AcquireEvent<EventOnNexusTakeDamage>(EventOnNexusTakeDamage.ID);
        ev.Nexus = Nexus;
        ev.Damage = Damage;
        ev.Source = Source;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnNexusDestroy OnNexusDestroy(EntityRef Nexus, EntityRef Killer) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnNexusDestroy>(EventOnNexusDestroy.ID);
        ev.Nexus = Nexus;
        ev.Killer = Killer;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnTeamNexusDestroy OnTeamNexusDestroy(Team Team) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnTeamNexusDestroy>(EventOnTeamNexusDestroy.ID);
        ev.Team = Team;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnWeaponShoot OnWeaponShoot(EntityRef Mechanic) {
        var ev = _f.Context.AcquireEvent<EventOnWeaponShoot>(EventOnWeaponShoot.ID);
        ev.Mechanic = Mechanic;
        _f.AddEvent(ev);
        return ev;
      }
      public EventDummyEvent DummyEvent() {
        var ev = _f.Context.AcquireEvent<EventDummyEvent>(EventDummyEvent.ID);
        _f.AddEvent(ev);
        return ev;
      }
    }
  }
  public unsafe partial class EventOnBulletDestroyed : EventBase {
    public new const Int32 ID = 1;
    public Int32 BulletRefHashCode;
    public EntityRef Mechanic;
    public FPVector3 BulletPosition;
    public FPVector3 BulletDirection;
    public AssetRef<BulletData> BulletData;
    protected EventOnBulletDestroyed(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnBulletDestroyed() : 
        base(1, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 41;
        hash = hash * 31 + BulletRefHashCode.GetHashCode();
        hash = hash * 31 + Mechanic.GetHashCode();
        hash = hash * 31 + BulletPosition.GetHashCode();
        hash = hash * 31 + BulletDirection.GetHashCode();
        hash = hash * 31 + BulletData.GetHashCode();
        return hash;
      }
    }
  }
  public abstract unsafe partial class EventMechanicEvent : EventBase {
    public new const Int32 ID = 2;
    public EntityRef Mechanic;
    protected EventMechanicEvent(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 43;
        hash = hash * 31 + Mechanic.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnMechanicTakeDamage : EventMechanicEvent {
    public new const Int32 ID = 3;
    public FP Damage;
    public EntityRef Source;
    protected EventOnMechanicTakeDamage(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnMechanicTakeDamage() : 
        base(3, EventFlags.Server|EventFlags.Client) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 47;
        hash = hash * 31 + Mechanic.GetHashCode();
        hash = hash * 31 + Damage.GetHashCode();
        hash = hash * 31 + Source.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnMechanicDeath : EventMechanicEvent {
    public new const Int32 ID = 4;
    public EntityRef Killer;
    protected EventOnMechanicDeath(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnMechanicDeath() : 
        base(4, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 53;
        hash = hash * 31 + Mechanic.GetHashCode();
        hash = hash * 31 + Killer.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnMechanicCreated : EventMechanicEvent {
    public new const Int32 ID = 5;
    protected EventOnMechanicCreated(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnMechanicCreated() : 
        base(5, EventFlags.Server|EventFlags.Client) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 59;
        hash = hash * 31 + Mechanic.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnMechanicRespawn : EventMechanicEvent {
    public new const Int32 ID = 6;
    protected EventOnMechanicRespawn(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnMechanicRespawn() : 
        base(6, EventFlags.Server|EventFlags.Client) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 61;
        hash = hash * 31 + Mechanic.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnMechanicChangeWeapon : EventMechanicEvent {
    public new const Int32 ID = 7;
    protected EventOnMechanicChangeWeapon(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnMechanicChangeWeapon() : 
        base(7, EventFlags.Server|EventFlags.Client) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 67;
        hash = hash * 31 + Mechanic.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnMechanicDashed : EventMechanicEvent {
    public new const Int32 ID = 8;
    protected EventOnMechanicDashed(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnMechanicDashed() : 
        base(8, EventFlags.Server|EventFlags.Client) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 71;
        hash = hash * 31 + Mechanic.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnGameEnded : EventBase {
    public new const Int32 ID = 9;
    protected EventOnGameEnded(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnGameEnded() : 
        base(9, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 73;
        return hash;
      }
    }
  }
  public unsafe partial class EventGameStateChanged : EventBase {
    public new const Int32 ID = 10;
    public GameState NewState;
    public GameState OldState;
    protected EventGameStateChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventGameStateChanged() : 
        base(10, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 79;
        hash = hash * 31 + NewState.GetHashCode();
        hash = hash * 31 + OldState.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventMovement : EventBase {
    public new const Int32 ID = 11;
    public EntityRef Owner;
    public FP Velocity;
    protected EventMovement(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventMovement() : 
        base(11, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 83;
        hash = hash * 31 + Owner.GetHashCode();
        hash = hash * 31 + Velocity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventWeaponFire : EventBase {
    public new const Int32 ID = 12;
    public EntityRef Owner;
    public AssetRef<WeaponData> WeaponData;
    protected EventWeaponFire(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventWeaponFire() : 
        base(12, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 89;
        hash = hash * 31 + Owner.GetHashCode();
        hash = hash * 31 + WeaponData.GetHashCode();
        return hash;
      }
    }
  }
  public abstract unsafe partial class EventNexusEvent : EventBase {
    public new const Int32 ID = 13;
    public EntityRef Nexus;
    protected EventNexusEvent(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 97;
        hash = hash * 31 + Nexus.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnNexusTakeDamage : EventNexusEvent {
    public new const Int32 ID = 14;
    public FP Damage;
    public EntityRef Source;
    protected EventOnNexusTakeDamage(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnNexusTakeDamage() : 
        base(14, EventFlags.Server|EventFlags.Client) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 101;
        hash = hash * 31 + Nexus.GetHashCode();
        hash = hash * 31 + Damage.GetHashCode();
        hash = hash * 31 + Source.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnNexusDestroy : EventNexusEvent {
    public new const Int32 ID = 15;
    public EntityRef Killer;
    protected EventOnNexusDestroy(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnNexusDestroy() : 
        base(15, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 103;
        hash = hash * 31 + Nexus.GetHashCode();
        hash = hash * 31 + Killer.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnTeamNexusDestroy : EventBase {
    public new const Int32 ID = 16;
    public Team Team;
    protected EventOnTeamNexusDestroy(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnTeamNexusDestroy() : 
        base(16, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 107;
        hash = hash * 31 + Team.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnWeaponShoot : EventBase {
    public new const Int32 ID = 17;
    public EntityRef Mechanic;
    protected EventOnWeaponShoot(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnWeaponShoot() : 
        base(17, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 109;
        hash = hash * 31 + Mechanic.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventDummyEvent : EventBase {
    public new const Int32 ID = 18;
    protected EventDummyEvent(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventDummyEvent() : 
        base(18, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 113;
        return hash;
      }
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
